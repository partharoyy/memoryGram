{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from 'react';\nimport { projectStorage, projectFirestore, timestamp } from '../firebase/config';\n\nconst useStorage = file => {\n  _s();\n\n  const [progress, setProgress] = useState(0);\n  const [error, setError] = useState(null);\n  const [url, setUrl] = useState(null);\n  useEffect(() => {\n    //create reference where image urls will be stored\n    const storageRef = projectStorage.ref(file.name);\n    const collectionRef = projectFirestore.collection('images'); //will put the file in the storage when user uploads\n\n    storageRef.put(file).on(\"state_change\", snap => {\n      //create percentage variable \n      let percentage = snap.bytesTransferred / snap.totalBytes * 100;\n      setProgress(percentage);\n    }, err => {\n      setError(err);\n    }, async () => {\n      const url = await storageRef.getDownloadURL();\n      const createdAt = timestamp(); //once we get the url do below\n\n      collectionRef.add({\n        url,\n        createdAt\n      });\n      setUrl(url);\n    });\n  }, [file]);\n  return {\n    progress,\n    error,\n    url\n  };\n};\n\n_s(useStorage, \"xn2AiAzche7NzWswJ7VS1PhvjkU=\");\n\nexport default useStorage;","map":{"version":3,"sources":["/Users/parth/Documents/GitHub/memoryGram/src/hooks/useStorage.js"],"names":["useState","useEffect","projectStorage","projectFirestore","timestamp","useStorage","file","progress","setProgress","error","setError","url","setUrl","storageRef","ref","name","collectionRef","collection","put","on","snap","percentage","bytesTransferred","totalBytes","err","getDownloadURL","createdAt","add"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,cAAT,EAAyBC,gBAAzB,EAA2CC,SAA3C,QAA4D,oBAA5D;;AAEA,MAAMC,UAAU,GAAIC,IAAD,IAAU;AAAA;;AACzB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,CAAC,CAAD,CAAxC;AACA,QAAM,CAACS,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACW,GAAD,EAAMC,MAAN,IAAgBZ,QAAQ,CAAC,IAAD,CAA9B;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZ;AACA,UAAMY,UAAU,GAAGX,cAAc,CAACY,GAAf,CAAmBR,IAAI,CAACS,IAAxB,CAAnB;AACA,UAAMC,aAAa,GAAGb,gBAAgB,CAACc,UAAjB,CAA4B,QAA5B,CAAtB,CAHY,CAKZ;;AACAJ,IAAAA,UAAU,CAACK,GAAX,CAAeZ,IAAf,EAAqBa,EAArB,CAAwB,cAAxB,EAAyCC,IAAD,IAAU;AAC9C;AACA,UAAIC,UAAU,GAAID,IAAI,CAACE,gBAAL,GAAwBF,IAAI,CAACG,UAA9B,GAA4C,GAA7D;AACAf,MAAAA,WAAW,CAACa,UAAD,CAAX;AACH,KAJD,EAIGG,GAAG,IAAI;AACNd,MAAAA,QAAQ,CAACc,GAAD,CAAR;AACH,KAND,EAMG,YAAY;AACX,YAAMb,GAAG,GAAG,MAAME,UAAU,CAACY,cAAX,EAAlB;AACA,YAAMC,SAAS,GAAGtB,SAAS,EAA3B,CAFW,CAGX;;AACAY,MAAAA,aAAa,CAACW,GAAd,CAAkB;AAAEhB,QAAAA,GAAF;AAAOe,QAAAA;AAAP,OAAlB;AACAd,MAAAA,MAAM,CAACD,GAAD,CAAN;AACH,KAZD;AAeH,GArBQ,EAqBN,CAACL,IAAD,CArBM,CAAT;AAuBA,SAAO;AAAEC,IAAAA,QAAF;AAAYE,IAAAA,KAAZ;AAAmBE,IAAAA;AAAnB,GAAP;AACH,CA7BD;;GAAMN,U;;AA+BN,eAAeA,UAAf","sourcesContent":["import { useState, useEffect } from 'react'\nimport { projectStorage, projectFirestore, timestamp } from '../firebase/config'\n\nconst useStorage = (file) => {\n    const [progress, setProgress] = useState(0);\n    const [error, setError] = useState(null);\n    const [url, setUrl] = useState(null);\n\n    useEffect(() => {\n        //create reference where image urls will be stored\n        const storageRef = projectStorage.ref(file.name);\n        const collectionRef = projectFirestore.collection('images');\n\n        //will put the file in the storage when user uploads\n        storageRef.put(file).on(\"state_change\", (snap) => {\n            //create percentage variable \n            let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\n            setProgress(percentage);\n        }, err => {\n            setError(err);\n        }, async () => {\n            const url = await storageRef.getDownloadURL();\n            const createdAt = timestamp();\n            //once we get the url do below\n            collectionRef.add({ url, createdAt })\n            setUrl(url)\n        })\n\n\n    }, [file])\n\n    return { progress, error, url }\n}\n\nexport default useStorage;\n"]},"metadata":{},"sourceType":"module"}